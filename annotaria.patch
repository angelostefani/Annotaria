diff --git a/docs/API_REST.md b/docs/API_REST.md
index 3e17284580d6dcddf8006cfb5e3e1846fa5c0335..7600582b57c4fb563fea80af9c2ab897df5ad02e 100644
--- a/docs/API_REST.md
+++ b/docs/API_REST.md
@@ -39,113 +39,180 @@ username=<username>&password=<password>
 **Response 200 OK**
 ```json
 {
   "access_token": "<token>",
   "token_type": "bearer"
 }
 ```
 
 Per le rotte che richiedono autenticazione inviare l'header:
 
 `Authorization: Bearer <token>`
 
 ## üìÅ IMMAGINI
 
 ### `GET /images`
 Restituisce l‚Äôelenco delle immagini disponibili nella directory configurata e sincronizza il DB.
 
 **Response 200 OK**
 ```json
 [
   {
     "id": 1,
     "filename": "immagine1.jpg",
     "url": "/static/immagine1.jpg",
     "exif_camera_model": "DJI Mavic Air 2",
-    "exif_datetime": "2025-07-31 14:30:00"
+    "exif_datetime": "2025-07-31 14:30:00",
+    "image_type_id": 1
   }
 ]
 ```
 
 ### `POST /images/upload`
-Carica una nuova immagine salvandola sul server ed estrae i metadati EXIF.
+Carica una nuova immagine salvandola sul server ed estrae i metadati EXIF. √à possibile specificare una Tipologia Immagine gi√† esistente.
 
 **Request** `multipart/form-data`
 ```
 file=<binary>
+image_type_id=1
 ```
 
 **Response 201 Created**
 ```json
 {
   "id": 2,
   "filename": "nuova.jpg",
   "path": "./image_data/nuova.jpg",
+  "image_type_id": 1,
   "exif_camera_model": "DJI Mavic Air 2",
   "exif_datetime": "2025-07-31 14:30:00"
 }
 ```
 
 ### `GET /images/{image_id}`
 Restituisce i dettagli di una singola immagine.
 
 **Response 200 OK**
 ```json
 {
   "id": 1,
   "filename": "immagine1.jpg",
   "path": "./image_data/immagine1.jpg",
-  "exif_camera_model": "DJI Mavic Air 2"
+  "exif_camera_model": "DJI Mavic Air 2",
+  "image_type": {
+    "id": 1,
+    "name": "Aerea"
+  }
 }
 ```
 
 ### `PUT /images/{image_id}`
 Aggiorna i metadati di un‚Äôimmagine esistente.
 
 **Request Body**
 ```json
 {
-  "filename": "nuovo_nome.jpg"
+  "filename": "nuovo_nome.jpg",
+  "image_type_id": 2
 }
 ```
 
 **Response 200 OK**
 ```json
 {
   "id": 1,
   "filename": "nuovo_nome.jpg",
-  "path": "./image_data/nuovo_nome.jpg"
+  "path": "./image_data/nuovo_nome.jpg",
+  "image_type_id": 2
 }
 ```
 
 ### `DELETE /images/{image_id}`
 Rimuove un‚Äôimmagine dal database e dal filesystem.
 
 **Response 204 No Content**
 
 ---
 
+## üè∑Ô∏è TIPOLOGIE IMMAGINE
+
+### `GET /image-types/`
+Elenca tutte le tipologie immagine disponibili.
+
+**Response 200 OK**
+```json
+[
+  {
+    "id": 1,
+    "name": "Aerea"
+  }
+]
+```
+
+### `POST /image-types/`
+Crea una nuova tipologia immagine.
+
+**Request Body**
+```json
+{
+  "name": "Termica"
+}
+```
+
+**Response 201 Created**
+```json
+{
+  "id": 2,
+  "name": "Termica"
+}
+```
+
+### `PUT /image-types/{type_id}`
+Aggiorna il nome di una tipologia esistente.
+
+**Request Body**
+```json
+{
+  "name": "Multispettrale"
+}
+```
+
+**Response 200 OK**
+```json
+{
+  "id": 2,
+  "name": "Multispettrale"
+}
+```
+
+### `DELETE /image-types/{type_id}`
+Elimina una tipologia immagine.
+
+**Response 204 No Content**
+
+---
+
 ## ‚ùì DOMANDE E OPZIONI
 
 ### `GET /questions/`
 Elenca tutte le domande presenti nel sistema.
 
 **Response 200 OK**
 ```json
 [
   {
     "id": 1,
     "question_text": "Qual √® lo stato della pianta?"
   }
 ]
 ```
 
 ### `POST /questions/`
 Crea una nuova domanda.
 
 **Request Body**
 ```json
 {
   "question_text": "La pianta √® infestata?"
 }
 ```
 
diff --git a/docs/Database_Structure.md b/docs/Database_Structure.md
index 2462ac2ae75fa8e7ee93362758010a0bd42b4ec4..bc77334ee6a01fd3d6b6a514e1e743eb8c9f90da 100644
--- a/docs/Database_Structure.md
+++ b/docs/Database_Structure.md
@@ -1,93 +1,104 @@
 # üóÉÔ∏è Struttura del Database ‚Äì Annotaria
 
 ---
 
 ## 1. `users`
 
 ```sql
 CREATE TABLE users (
     id SERIAL PRIMARY KEY,
     username TEXT NOT NULL UNIQUE,
     hashed_password TEXT NOT NULL,
     role TEXT NOT NULL DEFAULT 'Esperto'
 );
 ```
 
 ## 2. `images`
 
 ```sql
 CREATE TABLE images (
     id SERIAL PRIMARY KEY,
     filename TEXT NOT NULL UNIQUE,
     path TEXT NOT NULL,
     uploaded_at TIMESTAMP DEFAULT NOW(),
 
+    image_type_id INTEGER REFERENCES image_types(id),
+
     exif_datetime TEXT,
     exif_gps_lat FLOAT,
     exif_gps_lon FLOAT,
     exif_gps_alt FLOAT,
     exif_camera_make TEXT,
     exif_camera_model TEXT,
     exif_lens_model TEXT,
     exif_focal_length FLOAT,
     exif_aperture FLOAT,
     exif_iso INTEGER,
     exif_shutter_speed TEXT,
     exif_orientation TEXT,
     exif_image_width INTEGER,
     exif_image_height INTEGER,
     exif_drone_model TEXT,
     exif_flight_id TEXT,
     exif_pitch FLOAT,
     exif_roll FLOAT,
     exif_yaw FLOAT
 );
 ```
 
-## 3. `questions`
+## 3. `image_types`
+
+```sql
+CREATE TABLE image_types (
+    id SERIAL PRIMARY KEY,
+    name TEXT NOT NULL UNIQUE
+);
+```
+
+## 4. `questions`
 
 ```sql
 CREATE TABLE questions (
     id SERIAL PRIMARY KEY,
     question_text TEXT NOT NULL
 );
 ```
 
-## 4. `options`
+## 5. `options`
 
 ```sql
 CREATE TABLE options (
     id SERIAL PRIMARY KEY,
     question_id INTEGER NOT NULL REFERENCES questions(id) ON DELETE CASCADE,
     option_text TEXT NOT NULL
 );
 ```
 
-## 5. `answers`
+## 6. `answers`
 
 ```sql
 CREATE TABLE answers (
     id SERIAL PRIMARY KEY,
     image_id INTEGER NOT NULL REFERENCES images(id),
     question_id INTEGER NOT NULL REFERENCES questions(id),
     selected_option_id INTEGER NOT NULL REFERENCES options(id),
     user_id INTEGER NOT NULL REFERENCES users(id),
     answered_at TIMESTAMP DEFAULT NOW()
 );
 ```
 
-## 6. `annotations`
+## 7. `annotations`
 
 ```sql
 CREATE TABLE annotations (
     id SERIAL PRIMARY KEY,
     image_id INTEGER NOT NULL REFERENCES images(id),
     label TEXT NOT NULL,
     x FLOAT NOT NULL,
     y FLOAT NOT NULL,
     width FLOAT NOT NULL,
     height FLOAT NOT NULL,
     user_id INTEGER NOT NULL REFERENCES users(id),
     annotated_at TIMESTAMP DEFAULT NOW()
 );
 ```
diff --git a/main.py b/main.py
index f0b41c482bfcc73364247f59012ed197efb9253f..bf381d52eba0f8d0f45e75358ab876937bbc8d5d 100644
--- a/main.py
+++ b/main.py
@@ -64,37 +64,38 @@ def create_access_token(data: dict, expires_delta: timedelta | None = None) -> s
     )
     to_encode.update({"exp": expire})
     return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
 
 
 def get_current_user(
     token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)
 ):
     credentials_exception = HTTPException(
         status_code=status.HTTP_401_UNAUTHORIZED,
         detail="Could not validate credentials",
         headers={"WWW-Authenticate": "Bearer"},
     )
     try:
         payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
         username: str | None = payload.get("sub")
         if username is None:
             raise credentials_exception
     except JWTError:
         raise credentials_exception
     user = db.query(UserModel).filter_by(username=username).first()
     if user is None:
         raise credentials_exception
     return user
 
-from routers import annotations, answers, images, questions, users, ui
+from routers import annotations, answers, image_types, images, questions, users, ui
 from routers.images import IMAGE_DIR
 
 app.include_router(images.router)
+app.include_router(image_types.router)
 app.include_router(questions.router)
 app.include_router(answers.router)
 app.include_router(annotations.router)
 app.include_router(users.router)
 app.include_router(ui.router)
 
 app.mount("/image_data", StaticFiles(directory=str(IMAGE_DIR)), name="image_data")
 
diff --git a/models.py b/models.py
index 0dd036b3e451f20bb6a9b6da9c75345f9e66fa81..cda7b7ad3b1215af18b80c62bb67fa017b329ee6 100644
--- a/models.py
+++ b/models.py
@@ -1,72 +1,84 @@
 from sqlalchemy import Column, Integer, String, Float, Text, ForeignKey, DateTime
 from sqlalchemy.orm import relationship
 from sqlalchemy.sql import func
 
 from database import Base
 
 
 class User(Base):
     __tablename__ = "users"
 
     id = Column(Integer, primary_key=True, index=True)
     username = Column(String, unique=True, index=True, nullable=False)
     hashed_password = Column(String, nullable=False)
     role = Column(String, nullable=False, default="Esperto")
 
     answers = relationship("Answer", back_populates="user")
     annotations = relationship("Annotation", back_populates="user")
 
 
+class ImageType(Base):
+    __tablename__ = "image_types"
+
+    id = Column(Integer, primary_key=True, index=True)
+    name = Column(String, unique=True, nullable=False)
+
+    images = relationship("Image", back_populates="image_type")
+
+
 class Image(Base):
     __tablename__ = "images"
 
     id = Column(Integer, primary_key=True, index=True)
     filename = Column(String, unique=True, nullable=False)
     path = Column(String, nullable=False)
     uploaded_at = Column(DateTime(timezone=True), server_default=func.now())
 
     exif_datetime = Column(String)
     exif_gps_lat = Column(Float)
     exif_gps_lon = Column(Float)
     exif_gps_alt = Column(Float)
     exif_camera_make = Column(String)
     exif_camera_model = Column(String)
     exif_lens_model = Column(String)
     exif_focal_length = Column(Float)
     exif_aperture = Column(Float)
     exif_iso = Column(Integer)
     exif_shutter_speed = Column(String)
     exif_orientation = Column(String)
     exif_image_width = Column(Integer)
     exif_image_height = Column(Integer)
     exif_drone_model = Column(String)
     exif_flight_id = Column(String)
     exif_pitch = Column(Float)
     exif_roll = Column(Float)
     exif_yaw = Column(Float)
 
+    image_type_id = Column(Integer, ForeignKey("image_types.id"))
+    image_type = relationship("ImageType", back_populates="images")
+
     answers = relationship("Answer", back_populates="image")
     annotations = relationship("Annotation", back_populates="image")
 
 
 class Question(Base):
     __tablename__ = "questions"
 
     id = Column(Integer, primary_key=True, index=True)
     question_text = Column(Text, nullable=False)
 
     options = relationship("Option", back_populates="question")
     answers = relationship("Answer", back_populates="question")
 
 
 class Option(Base):
     __tablename__ = "options"
 
     id = Column(Integer, primary_key=True, index=True)
     question_id = Column(Integer, ForeignKey("questions.id", ondelete="CASCADE"), nullable=False)
     option_text = Column(Text, nullable=False)
 
     question = relationship("Question", back_populates="options")
     answers = relationship("Answer", back_populates="selected_option")
 
 
diff --git a/routers/image_types.py b/routers/image_types.py
new file mode 100644
index 0000000000000000000000000000000000000000..0d837d5455c3f0902cbec73083afad853d2cae56
--- /dev/null
+++ b/routers/image_types.py
@@ -0,0 +1,64 @@
+from typing import List
+
+from fastapi import APIRouter, Depends, HTTPException, status
+from sqlalchemy.orm import Session
+
+from database import get_db
+from models import ImageType as ImageTypeModel, User as UserModel
+from schemas import ImageType as ImageTypeSchema, ImageTypeCreate
+from main import get_current_user
+
+router = APIRouter()
+
+
+def require_admin(current_user: UserModel = Depends(get_current_user)):
+    if current_user.role != "Amministratore":
+        raise HTTPException(status_code=403, detail="Forbidden")
+    return current_user
+
+
+@router.post(
+    "/image-types/",
+    response_model=ImageTypeSchema,
+    dependencies=[Depends(require_admin)],
+)
+def create_image_type(image_type: ImageTypeCreate, db: Session = Depends(get_db)):
+    db_type = ImageTypeModel(name=image_type.name)
+    db.add(db_type)
+    db.commit()
+    db.refresh(db_type)
+    return db_type
+
+
+@router.put(
+    "/image-types/{type_id}",
+    response_model=ImageTypeSchema,
+    dependencies=[Depends(require_admin)],
+)
+def update_image_type(type_id: int, image_type: ImageTypeCreate, db: Session = Depends(get_db)):
+    db_type = db.query(ImageTypeModel).filter_by(id=type_id).first()
+    if not db_type:
+        raise HTTPException(status_code=404, detail="Image type not found")
+    db_type.name = image_type.name
+    db.commit()
+    db.refresh(db_type)
+    return db_type
+
+
+@router.delete(
+    "/image-types/{type_id}",
+    status_code=status.HTTP_204_NO_CONTENT,
+    dependencies=[Depends(require_admin)],
+)
+def delete_image_type(type_id: int, db: Session = Depends(get_db)):
+    db_type = db.query(ImageTypeModel).filter_by(id=type_id).first()
+    if not db_type:
+        raise HTTPException(status_code=404, detail="Image type not found")
+    db.delete(db_type)
+    db.commit()
+    return None
+
+
+@router.get("/image-types/", response_model=List[ImageTypeSchema])
+def list_image_types(db: Session = Depends(get_db)):
+    return db.query(ImageTypeModel).all()
diff --git a/routers/images.py b/routers/images.py
index 2fdeccc5f4a8a8853d98f64d74929bb1b4356015..570f9b5ab9ab08b3be93bc2a0b687b8a595dbbaf 100644
--- a/routers/images.py
+++ b/routers/images.py
@@ -1,44 +1,45 @@
 from pathlib import Path
 from typing import List
 import os
 import shutil
 
 from fastapi import (
     APIRouter,
     Depends,
     HTTPException,
     status,
     UploadFile,
     File,
+    Form,
     Response,
 )
 from sqlalchemy.orm import Session
 from PIL import Image as PILImage, ExifTags
 
 from database import get_db
-from models import Image as ImageModel, User as UserModel
+from models import Image as ImageModel, ImageType as ImageTypeModel, User as UserModel
 from schemas import Image as ImageSchema, ImageDetail, ImageUpdate
 from main import get_current_user
 
 router = APIRouter()
 
 IMAGE_DIR = Path(os.getenv("IMAGE_DIR", "./image_data"))
 IMAGE_DIR.mkdir(parents=True, exist_ok=True)
 
 
 def _ratio_to_float(value):
     return value[0] / value[1] if isinstance(value, tuple) else float(value)
 
 
 def _convert_to_degrees(value, ref):
     d, m, s = value
     decimal = _ratio_to_float(d) + _ratio_to_float(m) / 60 + _ratio_to_float(s) / 3600
     return -decimal if ref in ["S", "W"] else decimal
 
 
 def require_admin(current_user: UserModel = Depends(get_current_user)):
     if current_user.role != "Amministratore":
         raise HTTPException(status_code=403, detail="Forbidden")
     return current_user
 
 
@@ -78,109 +79,123 @@ def extract_exif(path: Path):
         elif tag == "GPSInfo":
             for t in value:
                 sub_tag = ExifTags.GPSTAGS.get(t, t)
                 gps_info[sub_tag] = value[t]
 
     if gps_info:
         lat = gps_info.get("GPSLatitude")
         lat_ref = gps_info.get("GPSLatitudeRef")
         lon = gps_info.get("GPSLongitude")
         lon_ref = gps_info.get("GPSLongitudeRef")
         alt = gps_info.get("GPSAltitude")
         alt_ref = gps_info.get("GPSAltitudeRef")
         if lat and lat_ref:
             data["exif_gps_lat"] = _convert_to_degrees(lat, lat_ref)
         if lon and lon_ref:
             data["exif_gps_lon"] = _convert_to_degrees(lon, lon_ref)
         if alt:
             altitude = _ratio_to_float(alt)
             if alt_ref == 1:
                 altitude = -altitude
             data["exif_gps_alt"] = altitude
 
     return data
 
 
-def register_image(path: Path, db: Session):
+def register_image(path: Path, db: Session, image_type_id: int | None = None):
     filename = path.name
     existing = db.query(ImageModel).filter_by(filename=filename).first()
     exif_data = extract_exif(path)
     if existing:
         for key, value in exif_data.items():
             setattr(existing, key, value)
         existing.path = str(path)
+        if image_type_id is not None:
+            existing.image_type_id = image_type_id
         db.commit()
         db.refresh(existing)
         return existing
-    db_image = ImageModel(filename=filename, path=str(path), **exif_data)
+    db_image = ImageModel(
+        filename=filename,
+        path=str(path),
+        image_type_id=image_type_id,
+        **exif_data,
+    )
     db.add(db_image)
     db.commit()
     db.refresh(db_image)
     return db_image
 
 
 @router.get("/images", response_model=List[ImageSchema])
 def read_images(db: Session = Depends(get_db)):
     for file in IMAGE_DIR.iterdir():
         if file.is_file():
             register_image(file, db)
     return db.query(ImageModel).all()
 
 
 @router.get("/images/{image_id}", response_model=ImageDetail)
 def read_image(image_id: int, db: Session = Depends(get_db)):
     image = db.query(ImageModel).filter(ImageModel.id == image_id).first()
     if not image:
         raise HTTPException(status_code=404, detail="Image not found")
     return image
 
 
 @router.post(
     "/images/upload",
     response_model=ImageDetail,
     status_code=status.HTTP_201_CREATED,
     dependencies=[Depends(require_admin)],
 )
 async def upload_image(
     file: UploadFile = File(..., description="Immagine da caricare"),
+    image_type_id: int | None = Form(None),
     db: Session = Depends(get_db),
 ):
     """Carica un'immagine, salva il file ed estrae i metadati EXIF."""
     file_path = IMAGE_DIR / file.filename
     if file_path.exists():
         raise HTTPException(status_code=400, detail="File already exists")
+    if image_type_id is not None and not db.query(ImageTypeModel).filter_by(id=image_type_id).first():
+        raise HTTPException(status_code=404, detail="Image type not found")
     with open(file_path, "wb") as buffer:
         shutil.copyfileobj(file.file, buffer)
-    return register_image(file_path, db)
+    return register_image(file_path, db, image_type_id=image_type_id)
 
 
 @router.put(
     "/images/{image_id}",
     response_model=ImageDetail,
     dependencies=[Depends(require_admin)],
 )
 def update_image(image_id: int, image_data: ImageUpdate, db: Session = Depends(get_db)):
     image = db.query(ImageModel).filter(ImageModel.id == image_id).first()
     if not image:
         raise HTTPException(status_code=404, detail="Image not found")
-    for key, value in image_data.dict(exclude_unset=True).items():
+    data = image_data.dict(exclude_unset=True)
+    if "image_type_id" in data and data["image_type_id"] is not None:
+        if not db.query(ImageTypeModel).filter_by(id=data["image_type_id"]).first():
+            raise HTTPException(status_code=404, detail="Image type not found")
+    for key, value in data.items():
         setattr(image, key, value)
     db.commit()
     db.refresh(image)
     return image
 
 
 @router.delete(
     "/images/{image_id}",
     status_code=status.HTTP_204_NO_CONTENT,
     dependencies=[Depends(require_admin)],
 )
 def delete_image(image_id: int, db: Session = Depends(get_db)):
     image = db.query(ImageModel).filter(ImageModel.id == image_id).first()
     if not image:
         raise HTTPException(status_code=404, detail="Image not found")
     file_path = Path(image.path)
     if file_path.exists():
         file_path.unlink()
     db.delete(image)
     db.commit()
     return Response(status_code=status.HTTP_204_NO_CONTENT)
diff --git a/routers/ui.py b/routers/ui.py
index 9666e5aef689db8bcbef427a3683b026fd171f37..77eeefeecbf717737d173d504fd66be0daa408f0 100644
--- a/routers/ui.py
+++ b/routers/ui.py
@@ -1,37 +1,38 @@
 from pathlib import Path
 import shutil
 
 from fastapi import APIRouter, Depends, Form, HTTPException, Request, UploadFile, File
 from fastapi.responses import HTMLResponse, RedirectResponse
 from fastapi.templating import Jinja2Templates
 from sqlalchemy.orm import Session
 from jose import JWTError, jwt
 
 from database import get_db
 from models import (
     Image as ImageModel,
+    ImageType as ImageTypeModel,
     Question as QuestionModel,
     Option as OptionModel,
     Answer as AnswerModel,
     Annotation as AnnotationModel,
     User as UserModel,
 )
 from routers.images import IMAGE_DIR, register_image
 from main import (
     create_access_token,
     get_password_hash,
     verify_password,
     SECRET_KEY,
     ALGORITHM,
 )
 
 templates = Jinja2Templates(directory="templates")
 
 router = APIRouter(prefix="/ui", tags=["ui"], include_in_schema=False)
 
 
 @router.get("/", response_class=HTMLResponse)
 def ui_root(request: Request, db: Session = Depends(get_db)):
     """Serve the UI entry point.
 
     If the user is authenticated, redirect them to the image list; otherwise
@@ -131,69 +132,72 @@ def login_user(
     user = db.query(UserModel).filter_by(username=username).first()
     if not user or not verify_password(password, user.hashed_password):
         return templates.TemplateResponse(
             "login.html", {"request": request, "error": "Invalid credentials"}
         )
     token = create_access_token({"sub": user.username})
     response = RedirectResponse(url="/ui/images", status_code=303)
     response.set_cookie("access_token", token, httponly=False)
     return response
 
 
 @router.post("/logout")
 def logout_user():
     response = RedirectResponse(url="/ui/login", status_code=303)
     response.delete_cookie("access_token")
     return response
 
 
 @router.get(
     "/images/upload",
     response_class=HTMLResponse,
 )
 def upload_image_form(
     request: Request,
     user: UserModel = Depends(require_admin),
+    db: Session = Depends(get_db),
 ):
+    types = db.query(ImageTypeModel).all()
     return templates.TemplateResponse(
-        "image_form.html", {"request": request, "user": user}
+        "image_form.html", {"request": request, "user": user, "image_types": types}
     )
 
 
 @router.post(
     "/images/upload",
     dependencies=[Depends(require_admin)],
 )
 async def upload_image(
     request: Request,
     file: UploadFile = File(...),
+    image_type_id: int | None = Form(None),
     db: Session = Depends(get_db),
 ):
     file_path = IMAGE_DIR / file.filename
     with open(file_path, "wb") as buffer:
         shutil.copyfileobj(file.file, buffer)
-    register_image(file_path, db)
+    register_image(file_path, db, image_type_id=image_type_id)
     return RedirectResponse(url="/ui/images", status_code=303)
 
 
 @router.get("/images/{image_id}", response_class=HTMLResponse)
 def view_image(
     image_id: int,
     request: Request,
     user: UserModel = Depends(require_user),
     db: Session = Depends(get_db),
 ):
     image = db.query(ImageModel).filter_by(id=image_id).first()
     if not image:
         raise HTTPException(status_code=404, detail="Image not found")
     questions = db.query(QuestionModel).all()
     for q in questions:
         _ = q.options
 
     answers = (
         db.query(AnswerModel)
         .filter_by(image_id=image_id, user_id=user.id)
         .all()
     )
     answer_map = {a.question_id: a.selected_option_id for a in answers}
 
     annotations = [
@@ -217,87 +221,181 @@ def view_image(
         {
             "request": request,
             "image": image,
             "questions": questions,
             "user": user,
             "token": token,
             "answer_map": answer_map,
             "annotations": annotations,
         },
     )
 
 
 @router.get(
     "/images/{image_id}/edit",
     response_class=HTMLResponse,
 )
 def edit_image_form(
     image_id: int,
     request: Request,
     user: UserModel = Depends(require_admin),
     db: Session = Depends(get_db),
 ):
     image = db.query(ImageModel).filter_by(id=image_id).first()
     if not image:
         raise HTTPException(status_code=404, detail="Image not found")
+    types = db.query(ImageTypeModel).all()
     return templates.TemplateResponse(
-        "image_form.html", {"request": request, "image": image, "user": user}
+        "image_form.html",
+        {"request": request, "image": image, "user": user, "image_types": types},
     )
 
 
 @router.post(
     "/images/{image_id}/edit",
     dependencies=[Depends(require_admin)],
 )
 def edit_image(
     image_id: int,
     filename: str = Form(...),
+    image_type_id: int | None = Form(None),
     db: Session = Depends(get_db),
 ):
     image = db.query(ImageModel).filter_by(id=image_id).first()
     if not image:
         raise HTTPException(status_code=404, detail="Image not found")
     image.filename = filename
+    image.image_type_id = image_type_id
     db.commit()
     return RedirectResponse(url="/ui/images", status_code=303)
 
 
 @router.post(
     "/images/{image_id}/delete",
     dependencies=[Depends(require_admin)],
 )
 def delete_image(image_id: int, db: Session = Depends(get_db)):
     image = db.query(ImageModel).filter_by(id=image_id).first()
     if image:
         file_path = Path(image.path)
         if file_path.exists():
             file_path.unlink()
         db.delete(image)
         db.commit()
     return RedirectResponse(url="/ui/images", status_code=303)
 
 
+@router.get(
+    "/image-types",
+    response_class=HTMLResponse,
+)
+def list_image_types(
+    request: Request,
+    user: UserModel = Depends(require_admin),
+    db: Session = Depends(get_db),
+):
+    types = db.query(ImageTypeModel).all()
+    return templates.TemplateResponse(
+        "image_types.html", {"request": request, "types": types, "user": user}
+    )
+
+
+@router.get(
+    "/image-types/create",
+    response_class=HTMLResponse,
+)
+def create_image_type_form(
+    request: Request,
+    user: UserModel = Depends(require_admin),
+):
+    return templates.TemplateResponse(
+        "image_type_form.html", {"request": request, "user": user}
+    )
+
+
+@router.post(
+    "/image-types/create",
+    dependencies=[Depends(require_admin)],
+)
+def create_image_type(
+    name: str = Form(...),
+    db: Session = Depends(get_db),
+):
+    img_type = ImageTypeModel(name=name)
+    db.add(img_type)
+    db.commit()
+    return RedirectResponse(url="/ui/image-types", status_code=303)
+
+
+@router.get(
+    "/image-types/{type_id}/edit",
+    response_class=HTMLResponse,
+)
+def edit_image_type_form(
+    type_id: int,
+    request: Request,
+    user: UserModel = Depends(require_admin),
+    db: Session = Depends(get_db),
+):
+    img_type = db.query(ImageTypeModel).filter_by(id=type_id).first()
+    if not img_type:
+        raise HTTPException(status_code=404, detail="Image type not found")
+    return templates.TemplateResponse(
+        "image_type_form.html",
+        {"request": request, "image_type": img_type, "user": user},
+    )
+
+
+@router.post(
+    "/image-types/{type_id}/edit",
+    dependencies=[Depends(require_admin)],
+)
+def edit_image_type(
+    type_id: int,
+    name: str = Form(...),
+    db: Session = Depends(get_db),
+):
+    img_type = db.query(ImageTypeModel).filter_by(id=type_id).first()
+    if not img_type:
+        raise HTTPException(status_code=404, detail="Image type not found")
+    img_type.name = name
+    db.commit()
+    return RedirectResponse(url="/ui/image-types", status_code=303)
+
+
+@router.post(
+    "/image-types/{type_id}/delete",
+    dependencies=[Depends(require_admin)],
+)
+def delete_image_type(type_id: int, db: Session = Depends(get_db)):
+    img_type = db.query(ImageTypeModel).filter_by(id=type_id).first()
+    if img_type:
+        db.delete(img_type)
+        db.commit()
+    return RedirectResponse(url="/ui/image-types", status_code=303)
+
+
 @router.get(
     "/questions",
     response_class=HTMLResponse,
 )
 def list_questions(
     request: Request,
     user: UserModel = Depends(require_admin),
     db: Session = Depends(get_db),
 ):
     questions = db.query(QuestionModel).all()
     return templates.TemplateResponse(
         "questions.html", {"request": request, "questions": questions, "user": user}
     )
 
 
 @router.get(
     "/questions/create",
     response_class=HTMLResponse,
 )
 def create_question_form(
     request: Request,
     user: UserModel = Depends(require_admin),
 ):
     return templates.TemplateResponse(
         "question_form.html", {"request": request, "user": user}
diff --git a/schemas/__init__.py b/schemas/__init__.py
index 42c398a3a99fe29bcb5960d7cce59ed088da6905..7794dc0caf2e48bba941b0758c5d5b704a6017fc 100644
--- a/schemas/__init__.py
+++ b/schemas/__init__.py
@@ -1,62 +1,80 @@
 from pydantic import BaseModel
 
 
+class ImageTypeBase(BaseModel):
+    name: str
+
+
+class ImageTypeCreate(ImageTypeBase):
+    pass
+
+
+class ImageType(ImageTypeBase):
+    id: int
+
+    class Config:
+        orm_mode = True
+
+
 class Image(BaseModel):
     id: int
     filename: str
     path: str
+    image_type_id: int | None = None
 
     class Config:
         orm_mode = True
 
 
 class ImageDetail(Image):
     exif_datetime: str | None = None
     exif_gps_lat: float | None = None
     exif_gps_lon: float | None = None
     exif_gps_alt: float | None = None
     exif_camera_make: str | None = None
     exif_camera_model: str | None = None
     exif_lens_model: str | None = None
     exif_focal_length: float | None = None
     exif_aperture: float | None = None
     exif_iso: int | None = None
     exif_shutter_speed: str | None = None
     exif_orientation: str | None = None
     exif_image_width: int | None = None
     exif_image_height: int | None = None
     exif_drone_model: str | None = None
     exif_flight_id: str | None = None
     exif_pitch: float | None = None
     exif_roll: float | None = None
     exif_yaw: float | None = None
+    image_type: ImageType | None = None
 
 
 class ImageUpdate(BaseModel):
     filename: str | None = None
     path: str | None = None
+    image_type_id: int | None = None
     exif_datetime: str | None = None
     exif_gps_lat: float | None = None
     exif_gps_lon: float | None = None
     exif_gps_alt: float | None = None
     exif_camera_make: str | None = None
     exif_camera_model: str | None = None
     exif_lens_model: str | None = None
     exif_focal_length: float | None = None
     exif_aperture: float | None = None
     exif_iso: int | None = None
     exif_shutter_speed: str | None = None
     exif_orientation: str | None = None
     exif_image_width: int | None = None
     exif_image_height: int | None = None
     exif_drone_model: str | None = None
     exif_flight_id: str | None = None
     exif_pitch: float | None = None
     exif_roll: float | None = None
     exif_yaw: float | None = None
 
 
 class QuestionBase(BaseModel):
     question_text: str
 
 
diff --git a/templates/base.html b/templates/base.html
index c7c5f9daf824d31691392ae07a58e268fbae00e2..517ccfe43ec9cb9a8dc48f91e57b82c8af582a1e 100644
--- a/templates/base.html
+++ b/templates/base.html
@@ -1,46 +1,47 @@
 
 <!DOCTYPE html>
 <html lang="en">
 <head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1">
     <title>Annotaria</title>
     <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
     <link rel="stylesheet" href="/static/css/style.css">
 </head>
 <body>
 <nav class="navbar navbar-expand-lg navbar-light bg-light mb-4">
     <div class="container-fluid">
         <a class="navbar-brand" href="/ui">Annotaria</a>
         <div class="collapse navbar-collapse">
             <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                 <li class="nav-item"><a class="nav-link" href="/ui/images">Images</a></li>
                 {% if user and user.role == 'Amministratore' %}
                 <li class="nav-item"><a class="nav-link" href="/ui/questions">Questions</a></li>
                 <li class="nav-item"><a class="nav-link" href="/ui/answers">Answers</a></li>
                 <li class="nav-item"><a class="nav-link" href="/ui/annotations">Annotations</a></li>
+                <li class="nav-item"><a class="nav-link" href="/ui/image-types">Image Types</a></li>
                 {% endif %}
             </ul>
             <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
                 {% if user %}
                 <li class="nav-item">
                     <span class="navbar-text me-2">Hello, {{ user.username }}</span>
                 </li>
                 <li class="nav-item">
                     <form action="/ui/logout" method="post" class="d-inline">
                         <button type="submit" class="btn btn-link nav-link">Logout</button>
                     </form>
                 </li>
                 {% else %}
                 <li class="nav-item"><a class="nav-link" href="/ui/login">Login</a></li>
                 <li class="nav-item"><a class="nav-link" href="/ui/register">Register</a></li>
                 {% endif %}
             </ul>
         </div>
     </div>
 </nav>
 <div class="container">
 {% block content %}{% endblock %}
 </div>
 <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
 </body>
diff --git a/templates/image_form.html b/templates/image_form.html
index 39e00efe08b2defb592fe69723c625b18d1a5c1c..10c000ebf5160b579d622a19238bc232c4e90e41 100644
--- a/templates/image_form.html
+++ b/templates/image_form.html
@@ -1,18 +1,27 @@
 {% extends "base.html" %}
 {% block content %}
 <h1>{% if image %}Edit Image{% else %}Upload Image{% endif %}</h1>
 <form method="post" enctype="multipart/form-data" {% if image %}action="/ui/images/{{ image.id }}/edit"{% else %}action="/ui/images/upload"{% endif %}>
 {% if image %}
 <div class="mb-3">
     <label for="filename" class="form-label">Filename</label>
     <input type="text" class="form-control" id="filename" name="filename" value="{{ image.filename }}">
 </div>
 {% else %}
 <div class="mb-3">
     <label for="file" class="form-label">File</label>
     <input type="file" class="form-control" id="file" name="file">
 </div>
 {% endif %}
+<div class="mb-3">
+    <label for="image_type_id" class="form-label">Image Type</label>
+    <select class="form-select" id="image_type_id" name="image_type_id">
+        <option value="" {% if not image or not image.image_type_id %}selected{% endif %}>Select type</option>
+        {% for t in image_types %}
+        <option value="{{ t.id }}" {% if image and image.image_type_id == t.id %}selected{% endif %}>{{ t.name }}</option>
+        {% endfor %}
+    </select>
+</div>
 <button type="submit" class="btn btn-primary">Submit</button>
 </form>
 {% endblock %}
diff --git a/templates/image_type_form.html b/templates/image_type_form.html
new file mode 100644
index 0000000000000000000000000000000000000000..de3c737e25172f883513e164f984fb5fbead46a2
--- /dev/null
+++ b/templates/image_type_form.html
@@ -0,0 +1,11 @@
+{% extends "base.html" %}
+{% block content %}
+<h1>{% if image_type %}Edit Image Type{% else %}New Image Type{% endif %}</h1>
+<form method="post" action="{% if image_type %}/ui/image-types/{{ image_type.id }}/edit{% else %}/ui/image-types/create{% endif %}">
+    <div class="mb-3">
+        <label for="name" class="form-label">Name</label>
+        <input type="text" class="form-control" id="name" name="name" value="{{ image_type.name if image_type else '' }}" required>
+    </div>
+    <button type="submit" class="btn btn-primary">Save</button>
+</form>
+{% endblock %}
diff --git a/templates/image_types.html b/templates/image_types.html
new file mode 100644
index 0000000000000000000000000000000000000000..bc0560e73ac7a0a7169380218d234d28f7430bef
--- /dev/null
+++ b/templates/image_types.html
@@ -0,0 +1,18 @@
+{% extends "base.html" %}
+{% block content %}
+<h1>Image Types</h1>
+<a href="/ui/image-types/create" class="btn btn-primary mb-3">New Image Type</a>
+<ul class="list-group">
+{% for t in types %}
+<li class="list-group-item d-flex justify-content-between">
+    {{ t.name }}
+    <span>
+        <a href="/ui/image-types/{{ t.id }}/edit" class="btn btn-sm btn-secondary">Edit</a>
+        <form method="post" action="/ui/image-types/{{ t.id }}/delete" class="d-inline">
+            <button type="submit" class="btn btn-sm btn-danger">Delete</button>
+        </form>
+    </span>
+</li>
+{% endfor %}
+</ul>
+{% endblock %}
