diff a/models.py b/models.py	(rejected hunks)
@@ -1,72 +1,84 @@
 from sqlalchemy import Column, Integer, String, Float, Text, ForeignKey, DateTime
 from sqlalchemy.orm import relationship
 from sqlalchemy.sql import func
 
 from database import Base
 
 
 class User(Base):
     __tablename__ = "users"
 
     id = Column(Integer, primary_key=True, index=True)
     username = Column(String, unique=True, index=True, nullable=False)
     hashed_password = Column(String, nullable=False)
     role = Column(String, nullable=False, default="Esperto")
 
     answers = relationship("Answer", back_populates="user")
     annotations = relationship("Annotation", back_populates="user")
 
 
+class ImageType(Base):
+    __tablename__ = "image_types"
+
+    id = Column(Integer, primary_key=True, index=True)
+    name = Column(String, unique=True, nullable=False)
+
+    images = relationship("Image", back_populates="image_type")
+
+
 class Image(Base):
     __tablename__ = "images"
 
     id = Column(Integer, primary_key=True, index=True)
     filename = Column(String, unique=True, nullable=False)
     path = Column(String, nullable=False)
     uploaded_at = Column(DateTime(timezone=True), server_default=func.now())
 
     exif_datetime = Column(String)
     exif_gps_lat = Column(Float)
     exif_gps_lon = Column(Float)
     exif_gps_alt = Column(Float)
     exif_camera_make = Column(String)
     exif_camera_model = Column(String)
     exif_lens_model = Column(String)
     exif_focal_length = Column(Float)
     exif_aperture = Column(Float)
     exif_iso = Column(Integer)
     exif_shutter_speed = Column(String)
     exif_orientation = Column(String)
     exif_image_width = Column(Integer)
     exif_image_height = Column(Integer)
     exif_drone_model = Column(String)
     exif_flight_id = Column(String)
     exif_pitch = Column(Float)
     exif_roll = Column(Float)
     exif_yaw = Column(Float)
 
+    image_type_id = Column(Integer, ForeignKey("image_types.id"))
+    image_type = relationship("ImageType", back_populates="images")
+
     answers = relationship("Answer", back_populates="image")
     annotations = relationship("Annotation", back_populates="image")
 
 
 class Question(Base):
     __tablename__ = "questions"
 
     id = Column(Integer, primary_key=True, index=True)
     question_text = Column(Text, nullable=False)
 
     options = relationship("Option", back_populates="question")
     answers = relationship("Answer", back_populates="question")
 
 
 class Option(Base):
     __tablename__ = "options"
 
     id = Column(Integer, primary_key=True, index=True)
     question_id = Column(Integer, ForeignKey("questions.id", ondelete="CASCADE"), nullable=False)
     option_text = Column(Text, nullable=False)
 
     question = relationship("Question", back_populates="options")
     answers = relationship("Answer", back_populates="selected_option")
 
 
