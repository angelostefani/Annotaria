diff a/docs/API_REST.md b/docs/API_REST.md	(rejected hunks)
@@ -39,113 +39,180 @@ username=<username>&password=<password>
 **Response 200 OK**
 ```json
 {
   "access_token": "<token>",
   "token_type": "bearer"
 }
 ```
 
 Per le rotte che richiedono autenticazione inviare l'header:
 
 `Authorization: Bearer <token>`
 
 ## üìÅ IMMAGINI
 
 ### `GET /images`
 Restituisce l‚Äôelenco delle immagini disponibili nella directory configurata e sincronizza il DB.
 
 **Response 200 OK**
 ```json
 [
   {
     "id": 1,
     "filename": "immagine1.jpg",
     "url": "/static/immagine1.jpg",
     "exif_camera_model": "DJI Mavic Air 2",
-    "exif_datetime": "2025-07-31 14:30:00"
+    "exif_datetime": "2025-07-31 14:30:00",
+    "image_type_id": 1
   }
 ]
 ```
 
 ### `POST /images/upload`
-Carica una nuova immagine salvandola sul server ed estrae i metadati EXIF.
+Carica una nuova immagine salvandola sul server ed estrae i metadati EXIF. √à possibile specificare una Tipologia Immagine gi√† esistente.
 
 **Request** `multipart/form-data`
 ```
 file=<binary>
+image_type_id=1
 ```
 
 **Response 201 Created**
 ```json
 {
   "id": 2,
   "filename": "nuova.jpg",
   "path": "./image_data/nuova.jpg",
+  "image_type_id": 1,
   "exif_camera_model": "DJI Mavic Air 2",
   "exif_datetime": "2025-07-31 14:30:00"
 }
 ```
 
 ### `GET /images/{image_id}`
 Restituisce i dettagli di una singola immagine.
 
 **Response 200 OK**
 ```json
 {
   "id": 1,
   "filename": "immagine1.jpg",
   "path": "./image_data/immagine1.jpg",
-  "exif_camera_model": "DJI Mavic Air 2"
+  "exif_camera_model": "DJI Mavic Air 2",
+  "image_type": {
+    "id": 1,
+    "name": "Aerea"
+  }
 }
 ```
 
 ### `PUT /images/{image_id}`
 Aggiorna i metadati di un‚Äôimmagine esistente.
 
 **Request Body**
 ```json
 {
-  "filename": "nuovo_nome.jpg"
+  "filename": "nuovo_nome.jpg",
+  "image_type_id": 2
 }
 ```
 
 **Response 200 OK**
 ```json
 {
   "id": 1,
   "filename": "nuovo_nome.jpg",
-  "path": "./image_data/nuovo_nome.jpg"
+  "path": "./image_data/nuovo_nome.jpg",
+  "image_type_id": 2
 }
 ```
 
 ### `DELETE /images/{image_id}`
 Rimuove un‚Äôimmagine dal database e dal filesystem.
 
 **Response 204 No Content**
 
 ---
 
+## üè∑Ô∏è TIPOLOGIE IMMAGINE
+
+### `GET /image-types/`
+Elenca tutte le tipologie immagine disponibili.
+
+**Response 200 OK**
+```json
+[
+  {
+    "id": 1,
+    "name": "Aerea"
+  }
+]
+```
+
+### `POST /image-types/`
+Crea una nuova tipologia immagine.
+
+**Request Body**
+```json
+{
+  "name": "Termica"
+}
+```
+
+**Response 201 Created**
+```json
+{
+  "id": 2,
+  "name": "Termica"
+}
+```
+
+### `PUT /image-types/{type_id}`
+Aggiorna il nome di una tipologia esistente.
+
+**Request Body**
+```json
+{
+  "name": "Multispettrale"
+}
+```
+
+**Response 200 OK**
+```json
+{
+  "id": 2,
+  "name": "Multispettrale"
+}
+```
+
+### `DELETE /image-types/{type_id}`
+Elimina una tipologia immagine.
+
+**Response 204 No Content**
+
+---
+
 ## ‚ùì DOMANDE E OPZIONI
 
 ### `GET /questions/`
 Elenca tutte le domande presenti nel sistema.
 
 **Response 200 OK**
 ```json
 [
   {
     "id": 1,
     "question_text": "Qual √® lo stato della pianta?"
   }
 ]
 ```
 
 ### `POST /questions/`
 Crea una nuova domanda.
 
 **Request Body**
 ```json
 {
   "question_text": "La pianta √® infestata?"
 }
 ```
 
